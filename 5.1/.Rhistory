);
#查看规则
inspect(rules)
as(rules.pruned, "data.frame")
source('D:/微云同步盘/421747587/课程/R数据挖掘实战（挖掘篇）/第六章 关联/第一节 关联规则/CODE/2.R', echo=TRUE)
install.packages("rattle")
install.packages("rattle")
install.packages("rattle")
dvdtrans <- read.csv(system.file("csv", "dvdtrans.csv",package="rattle"))
data <- read.csv('data.csv')
data <- as(split(dvdtrans$Item, dvdtrans$ID),"transactions")
#用 apriori命令生成频繁项集，设其支持度为0.5，置信度为0.8
rules <- apriori(data, parameter=list(support=0.5,confidence=0.8))
#用inspect命令提取规则
inspect(rules)
View(dvdtrans)
list  <- list('001'=c('beer', 'nappy'), '002'=c('beer', 'nappy'), '003'='lipstick', '004'='beer')
trData <- as(list, 'transactions')  # 转化为transaction类数据
inspect(trData)  # 查看数据情况
list  <- list('001'=c('beer', 'nappy'), '002'=c('beer', 'nappy'), '003'='lipstick', '004'='beer')
trData <- as(list, 'transactions')  # 转化为transaction类数据
inspect(trData)  # 查看数据情况
rules <- apriori(trData, parameter = list(supp = 0.1, conf =0.1))  # apriori关联算法函数调用
inspect(rules)  # 查看输出的规则
library(arulesViz)  # 加载可视化包
plot(rules, method='scatterplot') # 散点图判断大量规则的支持度与置信度分布情况
library(arulesViz)  # 加载可视化包
plot(rules, method='scatterplot') # 散点图判断大量规则的支持度与置信度分布情况
plot(rules, method='graph', control = list(type='items')) # 关联图看相互关系
install.packages("RODBC");
library(RODBC);
connect <- odbcConnectExcel("888_2.xls");
data <- read.csv('data.csv')
minlen=2;
supp=0.005;
conf=0.8;
data$
data$Class
;
data$Class
levels(data$Class)
table(data$Class)
table(data$Class)$1st
table(data$Class)[1]
prop.table(data$Class)
prop.table(table(data$Class))
supper <- as.data.frame(prop.table(table(data$Class)))
supper
supper[supper$Freq>supp, ]
apply(data, 2, function(column){
print(column)
})
apply(data, 1, function(column){
print(column)
})
apply(data, 2, function(column){
supper <- as.data.frame(
prop.table(table(data[, i]))
)
return(supper)
})
apply(data, 2, function(column){
supper <- as.data.frame(
prop.table(table(column))
)
return(supper)
})
apply(data, 2, function(column){
supper <- as.data.frame(
prop.table(table(column))
)
supperSuit <- supper[supper$Freq>supp, ];
return(supperSuit)
})
r1 <- apply(data, 2, function(column){
supper <- as.data.frame(
prop.table(table(column))
)
return(supperSuit)
supperSuit <- supper[supper$Freq>supp, ];
})
r1 <- apply(data, 2, function(column){
supper <- as.data.frame(
prop.table(table(column))
)
supperSuit <- supper[supper$Freq>supp, ];
return(supperSuit)
})
as.data.frame(r1)
length(r1)
for(i in 1:length(r1)) {
p <- r1[[i]]
print(p)
}
i=1
j=2
if(i!=j) {
p2 <- r1[[j]]
}
p1 <- r1[[i]]
View(p1)
combn(p1, p2)
combn(p1, 1)
combn(p1, 2)
p1
combn(colnames(p1), 2)
combn(p1$column, 2)
names(p1)
levels(p1)
r1[1]
names(r1[1])
p1 <- r1[i]
p2 <- r1[j]
c1 <- names(p1)
c2 <- names(p2)
data[, c1]
data[, c1, c2]
data[, c(c1, c2)]
p1
p1[[1]]
data[, c1] in p1[[1]]$column
data[, c1] %in% p1[[1]]$column
data[, c1] %in% p1[[1]]$column
data[, c1] %in% p1[[1]]$column && data[, c2] %in% p2[[1]]$column
data[, c1] %in% p1[[1]]$column & data[, c2] %in% p2[[1]]$column
data[data[, c1] %in% p1[[1]]$column & data[, c2] %in% p2[[1]]$column, ]
subData <- data[data[, c1] %in% p1[[1]]$column & data[, c2] %in% p2[[1]]$column, ]
subData <- data[data[, c1] %in% p1[[1]]$column & data[, c2] %in% p2[[1]]$column, ]
supper <- as.data.frame(
prop.table(table(subData[, c1], subData[, c2]))
)
supper
supperSuit <- supper[supper$Freq>supp, ];
supperSuit
getPT <- function(data, p1, p2) {
c1 <- names(p1)
c2 <- names(p2)
data[, c(c1, c2)]
subData <- data[data[, c1] %in% p1[[1]]$column & data[, c2] %in% p2[[1]]$column, ]
supper <- as.data.frame(
prop.table(table(subData[, c1], subData[, c2]))
)
supperSuit <- supper[supper$Freq>supp, ];
return(supperSuit)
}
getPT(data, p1, p2)
r <- data.frame(Var1=c(), Var2=c(), Freq=c())
r <- rbind(r, getPT(data, p1, p2))
r
r <- data.frame(Var1=c(), Var2=c(), Freq=c())
for(i in 1:length(r1)) {
#i=1
p1 <- r1[i]
for(j in i:length(r1)) {
#j=2
if(i!=j) {
p2 <- r1[j]
r <- rbind(r, getPT(data, p1, p2))
}
}
}
View(r)
getPT <- function(data, p1, p2) {
c1 <- names(p1)
c2 <- names(p2)
supper <- as.data.frame(
prop.table(table(data[, c(c1, c2)]))
)
supperSuit <- supper[supper$Freq>supp, ];
subData <- supperSuit[supperSuit[, 1] %in% p1[[1]]$column & supperSuit[, 2] %in% p2[[1]]$column, ]
return(supperSuit)
}
r <- data.frame(Var1=c(), Var2=c(), Freq=c())
for(i in 1:length(r1)) {
#i=1
p1 <- r1[i]
for(j in i:length(r1)) {
#j=2
if(i!=j) {
p2 <- r1[j]
r <- rbind(r, getPT(data, p1, p2))
}
}
}
getPT(data, p1, p2)
getPT <- function(data, p1, p2) {
c1 <- names(p1)
c2 <- names(p2)
supper <- as.data.frame(
prop.table(table(data[, c1], data[, c2]))
)
supperSuit <- supper[supper$Freq>supp, ];
subData <- supperSuit[supperSuit[, 1] %in% p1[[1]]$column & supperSuit[, 2] %in% p2[[1]]$column, ]
return(supperSuit)
}
r <- data.frame(Var1=c(), Var2=c(), Freq=c())
for(i in 1:length(r1)) {
#i=1
p1 <- r1[i]
for(j in i:length(r1)) {
#j=2
if(i!=j) {
p2 <- r1[j]
r <- rbind(r, getPT(data, p1, p2))
}
}
}
View(r)
View(r)
View(r)
data <- read.csv('data.csv')
supp <- 0.005;
conf <- 0.8;
r1 <- apply(data, 2, function(column){
supper <- as.data.frame(
prop.table(table(column))
)
supperSuit <- supper[supper$Freq>supp, ];
return(supperSuit)
})
getPT <- function(data, p1, p2) {
c1 <- names(p1)
c2 <- names(p2)
supper <- as.data.frame(
prop.table(table(data[, c1], data[, c2]))
)
supperSuit <- supper[supper$Freq>supp, ];
subData <- supperSuit[supperSuit[, 1] %in% p1[[1]]$column & supperSuit[, 2] %in% p2[[1]]$column, ]
return(supperSuit)
}
r <- data.frame(Var1=c(), Var2=c(), Freq=c())
for(i in 1:length(r1)) {
#i=1
p1 <- r1[i]
for(j in i:length(r1)) {
#j=2
if(i!=j) {
p2 <- r1[j]
r <- rbind(r, getPT(data, p1, p2))
}
}
}
View(r)
r1
View(r)
getNPT <- function(data, ...) {
ps = c(...);
supper <- as.data.frame(
prop.table(table(data[, ps]))
)
supperSuit <- supper[supper$Freq>supp, ];
return(supperSuit)
}
getNPT(data, 'Class')
colnames(data)
colnames(data)
colnames(data)
cols <- colnames(data)
length(cols)
cols <- colnames(data)
for(i in 1:length(cols)) {
print(choose(cols, i))
}
print(choose(cols, 1))
choose(cols, 1)
combn(cols, 1)
combn(cols, 2)
getNPT <- function(data, ...) {
ps = c(...);
supper <- as.data.frame(
prop.table(table(data[, ps]))
)
supperSuit <- supper[supper$Freq>supp, ];
return(supperSuit)
}
cols <- colnames(data)
for(i in 1:ncol(data)) {
df <- combn(cols, i)
for(j in 1:ncol(df)) {
ps <- df[, j];
print(getNPT(data, ps))
}
}
list  <- list('001'=c('beer', 'nappy'), '002'=c('beer', 'nappy'), '003'='lipstick', '004'='beer')
trData <- as(list, 'transactions')  # 转化为transaction类数据
inspect(trData)  # 查看数据情况
rules <- apriori(trData, parameter = list(supp = 0.1, conf =0.1))  # apriori关联算法函数调用
inspect(rules)  # 查看输出的规则
data <- read.transactions(file="data.csv", format = "single", cols = c(2,1))
data
summary(data)
data <- read.transactions(
file="data.csv", encoding='UTF8'
format = "single",
cols = c(2,1)
)
data <- read.transactions(
file="data.csv", encoding='UTF8',
format = "single",
cols = c(2,1)
)
summary(data)
data <- read.transactions(
file="data.csv", encoding='UTF-8',
format = "single",
cols = c(2,1)
)
summary(data)
data <- read.transactions(
file="data.csv",
encoding='UTF-8',
sep = ','
format = "single",
cols = c(2,1)
)
data <- read.transactions(
file="data.csv",
encoding='UTF-8',
sep = ',',
format = "single",
cols = c(2,1)
)
summary(data)
data <- read.transactions(
file="data.csv",
encoding='UTF-8',
sep = ',',
format = "single",
cols = c(2,2)
)
data <- read.transactions(
file="data.csv",
encoding='UTF-8',
sep = ',',
format = "single",
cols = c(2,1)
)
tr <- read.transactions("data.csv", format = "single", cols = c(1,2), sep=',', skip=1)
inspect(tr)
tr <- read.transactions(
"data.csv",
encoding='UTF-8',
format = "single",
cols = c(1,2),
sep=',',
skip=1
)
inspect(tr)
tr <- read.transactions(
"data.csv",
encoding='UTF8',
format = "single",
cols = c(1,2),
sep=',',
skip=1
)
inspect(tr)
tr <- read.transactions(
"data.csv",
encoding='UTF8',
format = "single",
cols = c(1,2),
sep=',',
skip=1
)
inspect(tr)
tr <- read.transactions(
"data.csv",
format = "single",
cols = c(1,2),
sep=',',
skip=1
)
inspect(tr)
tr <- read.transactions(
"data2.txt",
format="basket",
sep=",",
skip = 1
)
inspect(tr)
rules <- apriori(
data,
parameter=list(supp = 0.1, conf =0.1)
)
inspect(rules)
data <- read.transactions(
"data.csv",
format = "single",
cols = c(1,2),
sep=',',
skip=1
)
inspect(tr)
rules <- apriori(
data,
parameter=list(supp = 0.1, conf =0.1)
)
inspect(rules)
rules <- apriori(
data,
parameter=list(minlen=2, support=0.1, confidence=0.1)
)
inspect(rules)
rules <- apriori(
data,
parameter=list(
minlen=2,
maxlen=3,
support=0.1,
confidence=0.1
)
)
inspect(rules)
rules <- apriori(
data,
parameter=list(
support=0.1,
confidence=0.1
)
)
inspect(rules)
rules <- apriori(
data,
parameter=list(
support=0.6,
confidence=0.1
)
)
inspect(rules)
rules <- apriori(
data,
parameter=list(
support=0.5,
confidence=0.1
)
)
inspect(rules)
rules <- apriori(
data,
parameter=list(
support=0.5,
confidence=0.5
)
)
inspect(rules)
rules <- apriori(
data,
parameter=list(
support=0.2,
confidence=0.5
)
)
inspect(rules)
rules <- apriori(
data,
parameter=list(
support=0.2,
confidence=0.5
),
target = "rules"
)
inspect(rules)
rules <- apriori(
data,
parameter=list(
support=0.2,
confidence=0.5,
target = "rules"
)
)
inspect(rules)
rules <- apriori(
data,
parameter=list(
support=0.5,
confidence=0.5
)
)
inspect(rules)
data <- read.transactions(
"data.csv",
format = "single",
cols = c(1,2),
sep=',',
skip=1
)
data <- read.transactions(
"data.csv",
format = "single",
cols = c(1,2),
sep=',',
skip=1
)
inspect(data)
data2 <- read.transactions(
"data2.txt",
format="basket",
sep=",",
skip = 1
)
inspect(data2)
rules <- apriori(data)
inspect(rules)
rules <- apriori(
data,
parameter=list(
support=0.5,
confidence=0.5
)
)
inspect(rules)
