#把新加的点，加入到z中。
x <- (x1+x2)/2;
newPs <- append(newPs, x);
#处理过的点进行标记
ps[index[1]] <- NA;
ps[index[2]] <- NA;
i <- i+1;
indexes[i] <- index[1];
i <- i+1;
indexes[i] <- index[2];
#把距离矩阵已经处理过的点设置为NA
d[index[1], index[2]] <- maxD;
d[index[2], index[1]] <- maxD;
}
pColumns <- c('Sepal.Length', 'Sepal.Width', 'Petal.Length', 'Petal.Width');
data <- iris[pColumns];
scaleData <- as.data.frame(scale(data));
corData <- cor(scaleData)
ev <- eigen(corData)
z <- as.matrix(scaleData) %*% as.matrix(ev$vectors[, 1])
plot(z, rep(0, 150), ylim = c(0, 39))
d <- as.matrix(dist(z))
maxD <- max(d) + 1;
times <- 1
for(i in 1:length(z)) {
d[i, i] <- maxD;
x <- z[i];
lines(c(x, x), c(times-1, times))
}
times <- times + 1;
i <- 0;
ps <- z;
newPs <- c();
indexes <- c();
for(k in 1:1000) {
minD <- min(d);
#如果有多个最小点，取第一个
index <- which(d==minD, arr.ind=TRUE)[1, ];
if(index[1] %in% indexes || index[2] %in% indexes || minD==maxD) {
#重置
ps <- append(ps, newPs);
ps <- na.omit(ps);
if(length(ps)==1) {
break;
}
d <- as.matrix(dist(ps));
maxD <- max(d) + 1;
for(i in 1:length(ps)) {
#自己跟自己肯定是最短的，先干掉
d[i, i] <- maxD;
#补竖线，原理，没有被挑出来合并的点都是直线向上
lines(c(ps[i], ps[i]), c(times-1, times))
}
i <- 0;
newPs <- c();
indexes <- c();
times <- times + 1;
next;
}
#画两个点合并后的横线
x1 <- ps[index[1]];
x2 <- ps[index[2]];
lines(c(x1, x2), c(times-1, times-1))
#新的集群的方式是取中心点
#把新加的点，加入到z中。
x <- (x1+x2)/2;
newPs <- append(newPs, x);
#处理过的点进行标记
ps[index[1]] <- NA;
ps[index[2]] <- NA;
i <- i+1;
indexes[i] <- index[1];
i <- i+1;
indexes[i] <- index[2];
#把距离矩阵已经处理过的点设置为NA
d[index[1], index[2]] <- maxD;
d[index[2], index[1]] <- maxD;
}
pColumns <- c('Sepal.Length', 'Sepal.Width', 'Petal.Length', 'Petal.Width');
data <- iris[pColumns];
scaleData <- as.data.frame(scale(data));
corData <- cor(scaleData)
ev <- eigen(corData)
z <- as.matrix(scaleData) %*% as.matrix(ev$vectors[, 1])
plot(z, rep(0, 150), ylim = c(0, 39))
d <- as.matrix(dist(z))
maxD <- max(d) + 1;
times <- 1
for(i in 1:length(z)) {
d[i, i] <- maxD;
x <- z[i];
lines(c(x, x), c(times-1, times))
}
times <- times + 1;
i <- 0;
ps <- z;
newPs <- c();
indexes <- c();
for(k in 1:1000) {
minD <- min(d);
#如果有多个最小点，取第一个
index <- which(d==minD, arr.ind=TRUE)[1, ];
if(index[1] %in% indexes || index[2] %in% indexes || minD==maxD) {
#重置
ps <- append(ps, newPs);
ps <- na.omit(ps);
d <- as.matrix(dist(ps));
maxD <- max(d) + 1;
for(i in 1:length(ps)) {
#自己跟自己肯定是最短的，先干掉
d[i, i] <- maxD;
#补竖线，原理，没有被挑出来合并的点都是直线向上
lines(c(ps[i], ps[i]), c(times-1, times))
}
i <- 0;
newPs <- c();
indexes <- c();
times <- times + 1;
if(length(ps)==1) {
break;
}
next;
}
#画两个点合并后的横线
x1 <- ps[index[1]];
x2 <- ps[index[2]];
lines(c(x1, x2), c(times-1, times-1))
#新的集群的方式是取中心点
#把新加的点，加入到z中。
x <- (x1+x2)/2;
newPs <- append(newPs, x);
#处理过的点进行标记
ps[index[1]] <- NA;
ps[index[2]] <- NA;
i <- i+1;
indexes[i] <- index[1];
i <- i+1;
indexes[i] <- index[2];
#把距离矩阵已经处理过的点设置为NA
d[index[1], index[2]] <- maxD;
d[index[2], index[1]] <- maxD;
}
pColumns <- c('Sepal.Length', 'Sepal.Width', 'Petal.Length', 'Petal.Width');
data <- iris[pColumns];
scaleData <- as.data.frame(scale(data));
corData <- cor(scaleData)
ev <- eigen(corData)
z <- as.matrix(scaleData) %*% as.matrix(ev$vectors[, 1])
plot(z, rep(0, 150), ylim = c(0, 39))
d <- as.matrix(dist(z))
maxD <- max(d) + 1;
times <- 1
for(i in 1:length(z)) {
d[i, i] <- maxD;
x <- z[i];
lines(c(x, x), c(times-1, times))
}
times <- times + 1;
i <- 0;
ps <- z;
newPs <- c();
indexes <- c();
repeat {
minD <- min(d);
#如果有多个最小点，取第一个
index <- which(d==minD, arr.ind=TRUE)[1, ];
if(index[1] %in% indexes || index[2] %in% indexes || minD==maxD) {
#重置
ps <- append(ps, newPs);
ps <- na.omit(ps);
d <- as.matrix(dist(ps));
maxD <- max(d) + 1;
for(i in 1:length(ps)) {
#自己跟自己肯定是最短的，先干掉
d[i, i] <- maxD;
#补竖线，原理，没有被挑出来合并的点都是直线向上
lines(c(ps[i], ps[i]), c(times-1, times))
}
i <- 0;
newPs <- c();
indexes <- c();
times <- times + 1;
if(length(ps)==1) {
break;
}
next;
}
#画两个点合并后的横线
x1 <- ps[index[1]];
x2 <- ps[index[2]];
lines(c(x1, x2), c(times-1, times-1))
#新的集群的方式是取中心点
#把新加的点，加入到z中。
x <- (x1+x2)/2;
newPs <- append(newPs, x);
#处理过的点进行标记
ps[index[1]] <- NA;
ps[index[2]] <- NA;
i <- i+1;
indexes[i] <- index[1];
i <- i+1;
indexes[i] <- index[2];
#把距离矩阵已经处理过的点设置为NA
d[index[1], index[2]] <- maxD;
d[index[2], index[1]] <- maxD;
}
pColumns <- c('Sepal.Length', 'Sepal.Width', 'Petal.Length', 'Petal.Width');
data <- iris[pColumns];
scaleData <- as.data.frame(scale(data));
corData <- cor(scaleData)
ev <- eigen(corData)
z <- as.matrix(scaleData) %*% as.matrix(ev$vectors[, 1])
plot(z, rep(0, 150), ylim = c(0, 39), xlab="主成份", ylab="层数");
d <- as.matrix(dist(z))
maxD <- max(d) + 1;
times <- 1
for(i in 1:length(z)) {
d[i, i] <- maxD;
x <- z[i];
lines(c(x, x), c(times-1, times))
}
times <- times + 1;
i <- 0;
ps <- z;
newPs <- c();
indexes <- c();
repeat {
minD <- min(d);
#如果有多个最小点，取第一个
index <- which(d==minD, arr.ind=TRUE)[1, ];
if(index[1] %in% indexes || index[2] %in% indexes || minD==maxD) {
#重置
ps <- append(ps, newPs);
ps <- na.omit(ps);
d <- as.matrix(dist(ps));
maxD <- max(d) + 1;
for(i in 1:length(ps)) {
#自己跟自己肯定是最短的，先干掉
d[i, i] <- maxD;
#补竖线，原理，没有被挑出来合并的点都是直线向上
lines(c(ps[i], ps[i]), c(times-1, times))
}
i <- 0;
newPs <- c();
indexes <- c();
times <- times + 1;
if(length(ps)==1) {
break;
}
next;
}
#画两个点合并后的横线
x1 <- ps[index[1]];
x2 <- ps[index[2]];
lines(c(x1, x2), c(times-1, times-1))
#新的集群的方式是取中心点
#把新加的点，加入到z中。
x <- (x1+x2)/2;
newPs <- append(newPs, x);
#处理过的点进行标记
ps[index[1]] <- NA;
ps[index[2]] <- NA;
i <- i+1;
indexes[i] <- index[1];
i <- i+1;
indexes[i] <- index[2];
#把距离矩阵已经处理过的点设置为NA
d[index[1], index[2]] <- maxD;
d[index[2], index[1]] <- maxD;
}
pColumns <- c('Sepal.Length', 'Sepal.Width', 'Petal.Length', 'Petal.Width');
data <- iris[pColumns];
scaleData <- as.data.frame(scale(data));
corData <- cor(scaleData)
ev <- eigen(corData)
z <- as.matrix(scaleData) %*% as.matrix(ev$vectors[, 1])
plot(z, rep(0, 150), ylim = c(0, 38), xlab="主成份", ylab="层数");
d <- as.matrix(dist(z))
maxD <- max(d) + 1;
times <- 1
for(i in 1:length(z)) {
d[i, i] <- maxD;
x <- z[i];
lines(c(x, x), c(times-1, times))
}
times <- times + 1;
i <- 0;
ps <- z;
newPs <- c();
indexes <- c();
repeat {
minD <- min(d);
#如果有多个最小点，取第一个
index <- which(d==minD, arr.ind=TRUE)[1, ];
if(index[1] %in% indexes || index[2] %in% indexes || minD==maxD) {
#重置
ps <- append(ps, newPs);
ps <- na.omit(ps);
d <- as.matrix(dist(ps));
maxD <- max(d) + 1;
for(i in 1:length(ps)) {
#自己跟自己肯定是最短的，先干掉
d[i, i] <- maxD;
#补竖线，原理，没有被挑出来合并的点都是直线向上
lines(c(ps[i], ps[i]), c(times-1, times))
}
i <- 0;
newPs <- c();
indexes <- c();
times <- times + 1;
if(length(ps)==1) {
break;
}
next;
}
#画两个点合并后的横线
x1 <- ps[index[1]];
x2 <- ps[index[2]];
lines(c(x1, x2), c(times-1, times-1))
#新的集群的方式是取中心点
#把新加的点，加入到z中。
x <- (x1+x2)/2;
newPs <- append(newPs, x);
#处理过的点进行标记
ps[index[1]] <- NA;
ps[index[2]] <- NA;
i <- i+1;
indexes[i] <- index[1];
i <- i+1;
indexes[i] <- index[2];
#把距离矩阵已经处理过的点设置为NA
d[index[1], index[2]] <- maxD;
d[index[2], index[1]] <- maxD;
}
pColumns <- c('Sepal.Length', 'Sepal.Width', 'Petal.Length', 'Petal.Width');
data <- iris[pColumns];
scaleData <- as.data.frame(scale(data));
corData <- cor(scaleData)
ev <- eigen(corData)
z <- as.matrix(scaleData) %*% as.matrix(ev$vectors[, 1])
plot(z, rep(0, 150), ylim = c(0, 38), xlab="主成份", ylab="层数");
d <- as.matrix(dist(z))
maxD <- max(d) + 1;
times <- 1
for(i in 1:length(z)) {
d[i, i] <- maxD;
x <- z[i];
lines(c(x, x), c(times-1, times))
}
times <- times + 1;
i <- 0;
ps <- z;
newPs <- c();
indexes <- c();
repeat {
minD <- min(d);
#如果有多个最小点，取第一个
index <- which(d==minD, arr.ind=TRUE)[1, ];
if(index[1] %in% indexes || index[2] %in% indexes || minD==maxD) {
#重置
ps <- append(ps, newPs);
ps <- na.omit(ps);
d <- as.matrix(dist(ps));
maxD <- max(d) + 1;
for(i in 1:length(ps)) {
#自己跟自己肯定是最短的，先干掉
d[i, i] <- maxD;
#补竖线，原理，没有被挑出来合并的点都是直线向上
lines(c(ps[i], ps[i]), c(times-1, times))
}
i <- 0;
newPs <- c();
indexes <- c();
times <- times + 1;
if(length(ps)==1) {
break;
}
next;
}
#画两个点合并后的横线
x1 <- ps[index[1]];
x2 <- ps[index[2]];
lines(c(x1, x2), c(times-1, times-1))
#新的集群的方式是取中心点
#把新加的点，加入到z中。
x <- (x1+x2)/2;
newPs <- append(newPs, x);
#处理过的点进行标记
ps[index[1]] <- NA;
ps[index[2]] <- NA;
i <- i+1;
indexes[i] <- index[1];
i <- i+1;
indexes[i] <- index[2];
#把距离矩阵已经处理过的点设置为NA
d[index[1], index[2]] <- maxD;
d[index[2], index[1]] <- maxD;
}
pColumns <- c('Sepal.Length', 'Sepal.Width', 'Petal.Length', 'Petal.Width');
data <- iris[ , pColumns]
data.e <- dist(data)
model <- hclust(data.e, method='complete')
plot(model)
result <- cutree(model, k=3)
table(result, iris[, 5])
pColumns <- c('Sepal.Length', 'Sepal.Width', 'Petal.Length', 'Petal.Width');
data <- iris[ , pColumns]
data.e <- dist(data)
model <- hclust(data.e, method='complete')
plot(model)
result <- cutree(model, k=3)
table(result, iris[, 5])
pColumns <- c('Sepal.Length', 'Sepal.Width', 'Petal.Length', 'Petal.Width');
data <- iris[ , pColumns]
data.e <- dist(data)
model <- hclust(data.e, method='complete')
plot(model)
result <- cutree(model, k=3)
table(result, iris[, 5])
pColumns <- c('Sepal.Length', 'Sepal.Width', 'Petal.Length', 'Petal.Width');
data <- iris[pColumns];
scaleData <- as.data.frame(scale(data));
corData <- cor(scaleData)
ev <- eigen(corData)
z <- as.matrix(scaleData) %*% as.matrix(ev$vectors[, 1])
plot(
z,
rep(0, 150),
ylim=c(0, 38),
xlab="主成份",
ylab="层数"
);
d <- as.matrix(dist(z))
maxD <- max(d) + 1;
times <- 1
for(i in 1:length(z)) {
d[i, i] <- maxD;
x <- z[i];
lines(c(x, x), c(times-1, times))
}
times <- times + 1;
i <- 0;
ps <- z;
newPs <- c();
indexes <- c();
repeat {
minD <- min(d);
#如果有多个最小点，取第一个
index <- which(d==minD, arr.ind=TRUE)[1, ];
if(index[1] %in% indexes || index[2] %in% indexes || minD==maxD) {
#重置
ps <- append(ps, newPs);
ps <- na.omit(ps);
d <- as.matrix(dist(ps));
maxD <- max(d) + 1;
for(i in 1:length(ps)) {
#自己跟自己肯定是最短的，先干掉
d[i, i] <- maxD;
#补竖线，原理，没有被挑出来合并的点都是直线向上
lines(c(ps[i], ps[i]), c(times-1, times))
}
i <- 0;
newPs <- c();
indexes <- c();
times <- times + 1;
if(length(ps)==1) {
break;
}
next;
}
#画两个点合并后的横线
x1 <- ps[index[1]];
x2 <- ps[index[2]];
lines(c(x1, x2), c(times-1, times-1))
#新的集群的方式是取中心点
#把新加的点，加入到z中。
x <- (x1+x2)/2;
newPs <- append(newPs, x);
#处理过的点进行标记
ps[index[1]] <- NA;
ps[index[2]] <- NA;
i <- i+1;
indexes[i] <- index[1];
i <- i+1;
indexes[i] <- index[2];
#把距离矩阵已经处理过的点设置为NA
d[index[1], index[2]] <- maxD;
d[index[2], index[1]] <- maxD;
}
iris
pColumns <- c('Sepal.Length', 'Sepal.Width', 'Petal.Length', 'Petal.Width');
data <- iris[ , pColumns]
data
data.e <- dist(data)
data.e
data.e[1,]
data.m <- as.matrix(data.e)
View(data.m)
View(data.m)
iris
pColumns <- c('Sepal.Length', 'Sepal.Width', 'Petal.Length', 'Petal.Width');
data <- iris[ , pColumns]
View(data)
data.e <- dist(data)
data.m <- as.matrix(data.e)
View(data.m)
model <- hclust(data.e)
plot(model)
View(data)
result <- cutree(model, k=3)
result
table(iris[, 5], result)
