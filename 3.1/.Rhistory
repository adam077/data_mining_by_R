data <- read.csv('data.csv', stringsAsFactors=FALSE);
data
data <- read.csv('data.csv', stringsAsFactors=FALSE);
data <- read.csv('data.csv', stringsAsFactors=FALSE, fileEncoding = 'UTF8');
data <- read.csv('data.csv', stringsAsFactors=FALSE, fileEncoding='UTF8', sep = ',');
View(data)
data <- read.csv('data.csv', stringsAsFactors=FALSE, fileEncoding='UTF8', sep = ',');
library(class)
index <-sample(1:nrow(iris), 100)
iris.train <-iris[index, ]
iris.test <-iris[-index, ]
result.KNN <-knn(
train=subset(iris.train, select=-Species),
test=subset(iris.test,select=-Species),
cl=iris.train$Species
)
table(result.KNN, iris.test$Species)
subset(iris.train, select=-Species)
apply(data, 1, function(a){
print(a)
});
dist(data[, 1:2])
dist(data[, 1:2], diag = FALSE)
dist(data[, 1:2], diag = TRUE)
dist(data[, 1:2], diag = TRUE, upper = TRUE)
knn(data, c(3, 7), c('耐酸时间', '压强'), c('检验结果'))
knn <- function(data, d, pColumns, tColumn, k=2) {
dist <- apply(data, 1, function(r) {
return (sqrt(sum((r[pColumns] - d)^2)));
});
print(dist)
}
knn(data, c(3, 7), c('耐酸时间', '压强'), c('检验结果'))
d <-c(3, 7);
pColumns <- c('耐酸时间', '压强');
tColumn <- c('检验结果');
dist <- apply(data, 1, function(r) {
return (sqrt(sum((r[pColumns] - d)^2)));
});
dist <- apply(data[, pColumns], 1, function(r) {
return (sqrt(sum((r - d)^2)));
});
print(dist)
names(dist) <- data[, tColumn]
print(dist)
knn(data, c(3, 7), c('耐酸时间', '压强'), c('检验结果'))
knn <- function(data, d, pColumns, tColumn, k=2) {
d <-c(3, 7);
pColumns <- c('耐酸时间', '压强');
tColumn <- c('检验结果');
dist <- apply(data[, pColumns], 1, function(r) {
return (sqrt(sum((r - d)^2)));
});
names(dist) <- data[, tColumn]
return(dist)
}
knn(data, c(3, 7), c('耐酸时间', '压强'), c('检验结果'))
knn <- function(data, d, pColumns, tColumn, k=2) {
d <-c(3, 7);
pColumns <- c('耐酸时间', '压强');
tColumn <- c('检验结果');
dist <- apply(data[, pColumns], 1, function(r) {
return (sqrt(sum((r - d)^2)));
});
names(dist) <- data[, tColumn]
return(order(dist)[1:k])
}
knn(data, c(3, 7), c('耐酸时间', '压强'), c('检验结果'))
knn <- function(data, d, pColumns, tColumn, k=2) {
d <-c(3, 7);
pColumns <- c('耐酸时间', '压强');
tColumn <- c('检验结果');
dist <- apply(data[, pColumns], 1, function(r) {
return (sqrt(sum((r - d)^2)));
});
names(dist) <- data[, tColumn]
return(sort(dist)[1:k])
}
knn(data, c(3, 7), c('耐酸时间', '压强'), c('检验结果'))
table(knn(data, c(3, 7), c('耐酸时间', '压强'), c('检验结果')))
table(names(knn(data, c(3, 7), c('耐酸时间', '压强'), c('检验结果'))))
max(table(names(knn(data, c(3, 7), c('耐酸时间', '压强'), c('检验结果')))))
knn <- function(data, d, pColumns, tColumn, k=2) {
d <-c(3, 7);
pColumns <- c('耐酸时间', '压强');
tColumn <- c('检验结果');
dist <- apply(data[, pColumns], 1, function(r) {
return (sqrt(sum((r - d)^2)));
});
names(dist) <- data[, tColumn]
result <- sort(dist)[1:k];
return (as.data.frame(table(names(result))))
}
knn(data, c(3, 7), c('耐酸时间', '压强'), c('检验结果'))
dr <- as.data.frame(table(names(result)))
d <-c(3, 7);
pColumns <- c('耐酸时间', '压强');
tColumn <- c('检验结果');
dist <- apply(data[, pColumns], 1, function(r) {
return (sqrt(sum((r - d)^2)));
});
names(dist) <- data[, tColumn]
result <- sort(dist)[1:k];
dr <- as.data.frame(table(names(result)))
k <- 2
result <- sort(dist)[1:k];
dr <- as.data.frame(table(names(result)))
dr
dr[order(dr$Freq)[1], ]
dr[order(dr$Freq)[1], 1]
dr <- as.data.frame(table(names(result)), stringsAsFactors=FALSE)
dr[order(dr$Freq)[1], 1]
knn <- function(data, d, pColumns, tColumn, k=2) {
d <-c(3, 7);
pColumns <- c('耐酸时间', '压强');
tColumn <- c('检验结果');
k <- 2
dist <- apply(data[, pColumns], 1, function(r) {
return (sqrt(sum((r - d)^2)));
});
names(dist) <- data[, tColumn]
result <- sort(dist)[1:k];
dr <- as.data.frame(table(names(result)), stringsAsFactors=FALSE)
return (dr[order(dr$Freq)[1], 1])
}
knn(data, c(3, 7), c('耐酸时间', '压强'), c('检验结果'))
data <- read.csv(
'data.csv',
stringsAsFactors=FALSE,
fileEncoding='UTF8'
);
knn <- function(data, d, pColumns, tColumn, k=2) {
d <-c(3, 7);
pColumns <- c('耐酸时间', '压强');
tColumn <- c('检验结果');
k <- 2
dist <- apply(data[, pColumns], 1, function(r) {
return (sqrt(sum((r - d)^2)));
});
names(dist) <- data[, tColumn]
#获取前K个最近的邻居
result <- sort(dist)[1:k];
dr <- as.data.frame(table(names(result)), stringsAsFactors=FALSE)
#统计排序返回出现次数最大的第一个
return (dr[order(dr$Freq)[1], 1])
}
knn(data, c(3, 7), c('耐酸时间', '压强'), c('检验结果'))
library(class)
index <-sample(1:nrow(iris), 100)
iris.train <-iris[index, ]
iris.test <-iris[-index, ]
result.KNN <-knn(
train=subset(iris.train, select=-Species),
test=subset(iris.test,select=-Species),
cl=iris.train$Species
)
table(result.KNN, iris.test$Species)
data <- read.csv(
'data.csv',
stringsAsFactors=FALSE,
fileEncoding='UTF8'
);
knn <- function(data, d, pColumns, tColumn, k=2) {
#d <-c(3, 7);
#pColumns <- c('耐酸时间', '压强');
#tColumn <- c('检验结果');
#k <- 2
dist <- apply(data[, pColumns], 1, function(r) {
return (sqrt(sum((r - d)^2)));
});
names(dist) <- data[, tColumn]
#获取前K个最近的邻居
result <- sort(dist)[1:k];
dr <- as.data.frame(table(names(result)), stringsAsFactors=FALSE)
#统计排序返回出现次数最大的第一个
return (dr[order(dr$Freq)[1], 1])
}
knn(data, c(3, 7), c('耐酸时间', '压强'), c('检验结果'))
result.KNN
result.KNN <-knn(
train=subset(iris.train, select=-Species),
test=subset(iris.test,select=-Species),
cl=iris.train$Species, k=2
)
table(result.KNN, iris.test$Species)
subset(iris.train, select=-Species)
result.KNN <-knn(
train=subset(iris.train, select=-Species),
test=subset(iris.test,select=-Species),
cl=iris.train$Species, k = 2
)
result.KNN <-knn(
train=subset(iris.train, select=-Species),
test=subset(iris.test,select=-Species),
cl=iris.train$Species, k = 3
)
result.KNN <-knn(
train=subset(iris.train, select=-Species),
test=subset(iris.test,select=-Species),
cl=iris.train$Species
)
index <-sample(1:nrow(iris), 100)
iris.train <-iris[index, ]
iris.test <-iris[-index, ]
result.KNN <-knn(
train=subset(iris.train, select=-Species),
test=subset(iris.test,select=-Species),
cl=iris.train$Species
)
table(result.KNN, iris.test$Species)
1:nrow(iris)
library(class)
index <-sample(1:nrow(iris), 100)
iris.train <-iris[index, ]
iris.test <-iris[-index, ]
result.KNN <-knn(
train=subset(iris.train, select=-Species),
test=subset(iris.test,select=-Species),
cl=iris.train$Species
)
table(result.KNN, iris.test$Species)
result.KNN <-knn(
train=subset(iris.train, select=-Species),
test=subset(iris.test,select=-Species),
cl=iris.train$Species, k=2
)
table(result.KNN, iris.test$Species)
result.KNN <-knn(
train=subset(iris.train, select=-Species),
test=subset(iris.test,select=-Species),
cl=iris.train$Species, k=3
)
table(result.KNN, iris.test$Species)
result.KNN <-knn(
train=subset(iris.train, select=-Species),
test=subset(iris.test,select=-Species),
cl=iris.train$Species, k=4
)
table(result.KNN, iris.test$Species)
result.KNN <-knn(
train=subset(iris.train, select=-Species),
test=subset(iris.test,select=-Species),
cl=iris.train$Species, k=5
)
table(result.KNN, iris.test$Species)
result.KNN <-knn(
train=subset(iris.train, select=-Species),
test=subset(iris.test,select=-Species),
cl=iris.train$Species, k=6
)
table(result.KNN, iris.test$Species)
result.KNN <-knn(
train=subset(iris.train, select=-Species),
test=subset(iris.test,select=-Species),
cl=iris.train$Species, k=10
)
table(result.KNN, iris.test$Species)
library(class)
index <-sample(1:nrow(iris), 100)
iris.train <-iris[index, ]
iris.test <-iris[-index, ]
iris
iris
total <- nrow(iris);
total
index <-sample(1:total, total*0.7)
1:total
index <-sample(1:total, total*0.7)
index
iris.train <- iris[index, ]
iris.test <- iris[-index, ]
library(class)
iris.train
iris
result.KNN <-knn(
train=subset(iris.train, select=-Species),
test=subset(iris.test,select=-Species),
cl=iris.train$Species, k=1
)
result.KNN
table(iris.test$Species, result.KNN)
result.KNN <-knn(
train=subset(iris.train, select=-Species),
test=subset(iris.test,select=-Species),
cl=iris.train$Species, k=3
)
table(iris.test$Species, result.KNN)
