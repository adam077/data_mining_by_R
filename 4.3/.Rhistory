d <- as.matrix(dist(data))
ps <- data.frame(index=c(NA), density=c(NA), type=c(NA))
for(i in 1:nrow(data)) {
#i <- 1;
index <- which(d[i, ]<eps)
#密度，记得除去它本身
density <- length(index) - 1;
if(density>MinPts) {
#核心点
ps[i, ] <- c(i, density, 1)
} else if(density>0) {
#边界点
ps[i, ] <- c(i, density, 2)
} else {
#噪声点
ps[i, ] <- c(i, density, 0)
}
}
corePoints <- data[which(ps$type!=0), ]
coreDists <- as.matrix(dist(corePoints))
cluster <- list();
for(i in 1:nrow(coreDists)) {
cluster[[i]] <- names(which(coreDists[i, ]<eps));
}
for(i in 1:length(cluster)) {
for(j in 1:length(cluster)) {
if(any(cluster[[j]] %in% cluster[[i]]) && i!=j) {
if(ps[cluster[[i]][1], ]$type==1 && ps[cluster[[i]][2], ]$type==1) {
cluster[[i]] <- unique(append(cluster[[i]], cluster[[j]]))
cluster[[j]] <- list();
}
}
}
}
result <- list();
for(i in 1:length(cluster)) {
if(length(cluster[[i]])>0) {
result[[length(result)+1]] <- cluster[[i]]
}
}
for(i in 1:length(result)) {
for(j in result[[i]]) {
data[j, 3] <- i
}
}
p <- ggplot(data, aes(x,y))
p + geom_point(size=2.5, aes(colour=factor(data[, 3]))) + theme(legend.position='top')
library(ggplot2)
p <- ggplot(data, aes(x,y))
p + geom_point(size=2.5, aes(colour=factor(data[, 3]))) + theme(legend.position='top')
# 生成数据
x1 <- seq(0, pi, length.out=100)
y1 <- sin(x1) + 0.1*rnorm(100)
x2 <- 1.5 + seq(0, pi, length.out=100)
y2 <- cos(x2) + 0.1*rnorm(100)
data <- data.frame(c(x1,x2),c(y1,y2))
names(data) <- c('x','y')
#将所有点标记为核心点、边界点或噪声点
#核心点（Core Points）：如果某个点的邻域内的点的个数超过某个阀值，则它是一个核心点，即表示它位于簇的内部。邻域的大小由半径参数eps决定，阀值由minPts参数决定。
eps <- 0.2;
MinPts <- 5;
d <- as.matrix(dist(data))
ps <- data.frame(index=c(NA), density=c(NA), type=c(NA))
for(i in 1:nrow(data)) {
#i <- 1;
index <- which(d[i, ]<eps)
#密度，记得除去它本身
density <- length(index) - 1;
if(density>MinPts) {
#核心点
ps[i, ] <- c(i, density, 1)
} else if(density>0) {
#边界点
ps[i, ] <- c(i, density, 2)
} else {
#噪声点
ps[i, ] <- c(i, density, 0)
}
}
corePoints <- data[which(ps$type!=0), ]
coreDists <- as.matrix(dist(corePoints))
cluster <- list();
for(i in 1:nrow(coreDists)) {
cluster[[i]] <- names(which(coreDists[i, ]<eps));
}
for(i in 1:length(cluster)) {
for(j in 1:length(cluster)) {
if(any(cluster[[j]] %in% cluster[[i]]) && i!=j) {
if(ps[cluster[[i]][1], ]$type==1 && ps[cluster[[i]][2], ]$type==1) {
cluster[[i]] <- unique(append(cluster[[i]], cluster[[j]]))
cluster[[j]] <- list();
}
}
}
}
result <- list();
for(i in 1:length(cluster)) {
if(length(cluster[[i]])>0) {
result[[length(result)+1]] <- cluster[[i]]
}
}
for(i in 1:length(result)) {
for(j in result[[i]]) {
data[j, 3] <- i
}
}
library(ggplot2)
p <- ggplot(data, aes(x,y))
p + geom_point(size=2.5, aes(colour=factor(data[, 3]))) + theme(legend.position='top')
View(data)
View(data)
#install.packages('fpc')
#install.packages("colorspace")
#install.packages("ggplot2")
library('fpc')
library(ggplot2)
# 生成数据
x1 <- seq(0, pi, length.out=100)
y1 <- sin(x1) + 0.1*rnorm(100)
x2 <- 1.5 + seq(0, pi, length.out=100)
y2 <- cos(x2) + 0.1*rnorm(100)
data <- data.frame(c(x1,x2),c(y1,y2))
names(data) <- c('x','y')
# 用K均值聚类
model1 <- kmeans(data,centers=2,nstart=10)
p <- ggplot(data,aes(x,y))
p + geom_point(size=2.5,aes(colour=factor(model1$cluster)))+
theme(legend.position='top')
# 用fpc包中的dbscan函数进行密度聚类
model2 <- dbscan(data, eps=0.2, MinPts=5)
model2$cluster
p <- ggplot(data,aes(x,y))
p + geom_point(size=2.5, aes(colour=factor(model2$cluster)))+
theme(legend.position='top')
data <- data.frame(c(x1,x2),c(y1,y2))
names(data) <- c('x','y')
#将所有点标记为核心点、边界点或噪声点
#核心点（Core Points）：
#如果某个点的邻域内的点的个数超过某个阀值，则它是一个核心点，即表示它位于簇的内部。
#邻域的大小由半径参数eps决定，阀值由minPts参数决定。
eps <- 0.2;
MinPts <- 5;
d <- as.matrix(dist(data))
ps <- data.frame(index=c(NA), density=c(NA), type=c(NA))
for(i in 1:nrow(data)) {
#i <- 1;
index <- which(d[i, ]<eps)
#密度，记得除去它本身
density <- length(index) - 1;
if(density>MinPts) {
#核心点
ps[i, ] <- c(i, density, 1)
} else if(density>0) {
#边界点
ps[i, ] <- c(i, density, 2)
} else {
#噪声点
ps[i, ] <- c(i, density, 0)
}
}
corePoints <- data[which(ps$type!=0), ]
coreDists <- as.matrix(dist(corePoints))
cluster <- list();
for(i in 1:nrow(coreDists)) {
cluster[[i]] <- names(which(coreDists[i, ]<eps));
}
for(i in 1:length(cluster)) {
for(j in 1:length(cluster)) {
if(any(cluster[[j]] %in% cluster[[i]]) && i!=j) {
if(ps[cluster[[i]][1], ]$type==1 && ps[cluster[[i]][2], ]$type==1) {
cluster[[i]] <- unique(append(cluster[[i]], cluster[[j]]))
cluster[[j]] <- list();
}
}
}
}
result <- list();
for(i in 1:length(cluster)) {
if(length(cluster[[i]])>0) {
result[[length(result)+1]] <- cluster[[i]]
}
}
for(i in 1:length(result)) {
for(j in result[[i]]) {
data[j, 3] <- i
}
}
library(ggplot2)
p <- ggplot(data, aes(x,y))
p + geom_point(size=2.5, aes(colour=factor(data[, 3]))) + theme(legend.position='top')
# 生成数据
x1 <- seq(0, pi, length.out=100)
y1 <- sin(x1) + 0.1*rnorm(100)
x2 <- 1.5 + seq(0, pi, length.out=100)
y2 <- cos(x2) + 0.1*rnorm(100)
data <- data.frame(c(x1,x2),c(y1,y2))
names(data) <- c('x','y')
#将所有点标记为核心点、边界点或噪声点
#核心点（Core Points）：
#如果某个点的邻域内的点的个数超过某个阀值，则它是一个核心点，即表示它位于簇的内部。
#邻域的大小由半径参数eps决定，阀值由minPts参数决定。
eps <- 0.2;
MinPts <- 5;
d <- as.matrix(dist(data))
ps <- data.frame(index=c(NA), density=c(NA), type=c(NA))
for(i in 1:nrow(data)) {
#i <- 1;
index <- which(d[i, ]<eps)
#密度，记得除去它本身
density <- length(index) - 1;
if(density>MinPts) {
#核心点
ps[i, ] <- c(i, density, 1)
} else if(density>0) {
#边界点
ps[i, ] <- c(i, density, 2)
} else {
#噪声点
ps[i, ] <- c(i, density, 0)
}
}
corePoints <- data[which(ps$type!=0), ]
coreDists <- as.matrix(dist(corePoints))
cluster <- list();
for(i in 1:nrow(coreDists)) {
cluster[[i]] <- names(which(coreDists[i, ]<eps));
}
for(i in 1:length(cluster)) {
for(j in 1:length(cluster)) {
if(any(cluster[[j]] %in% cluster[[i]]) && i!=j) {
if(ps[cluster[[i]][1], ]$type==1 && ps[cluster[[i]][2], ]$type==1) {
cluster[[i]] <- unique(append(cluster[[i]], cluster[[j]]))
cluster[[j]] <- list();
}
}
}
}
result <- list();
for(i in 1:length(cluster)) {
if(length(cluster[[i]])>0) {
result[[length(result)+1]] <- cluster[[i]]
}
}
for(i in 1:length(result)) {
for(j in result[[i]]) {
data[j, 3] <- i
}
}
library(ggplot2)
p <- ggplot(data, aes(x,y))
p + geom_point(size=2.5, aes(colour=factor(data[, 3]))) + theme(legend.position='top')
# 生成数据
x1 <- seq(0, pi, length.out=100)
y1 <- sin(x1) + 0.1*rnorm(100)
x2 <- 1.5 + seq(0, pi, length.out=100)
y2 <- cos(x2) + 0.1*rnorm(100)
data <- data.frame(c(x1,x2),c(y1,y2))
names(data) <- c('x','y')
#将所有点标记为核心点、边界点或噪声点
#核心点（Core Points）：
#如果某个点的邻域内的点的个数超过某个阀值，则它是一个核心点，即表示它位于簇的内部。
#邻域的大小由半径参数eps决定，阀值由minPts参数决定。
eps <- 0.2;
MinPts <- 5;
d <- as.matrix(dist(data))
ps <- data.frame(index=c(NA), density=c(NA), type=c(NA))
for(i in 1:nrow(data)) {
#i <- 1;
index <- which(d[i, ]<eps)
#密度，记得除去它本身
density <- length(index) - 1;
if(density>MinPts) {
#核心点
ps[i, ] <- c(i, density, 1)
} else if(density>0) {
#边界点
ps[i, ] <- c(i, density, 2)
} else {
#噪声点
ps[i, ] <- c(i, density, 0)
}
}
corePoints <- data[which(ps$type!=0), ]
coreDists <- as.matrix(dist(corePoints))
cluster <- list();
for(i in 1:nrow(coreDists)) {
cluster[[i]] <- names(which(coreDists[i, ]<eps));
}
for(i in 1:length(cluster)) {
for(j in 1:length(cluster)) {
if(any(cluster[[j]] %in% cluster[[i]]) && i!=j) {
if(ps[cluster[[i]][1], ]$type==1 && ps[cluster[[i]][2], ]$type==1) {
cluster[[i]] <- unique(append(cluster[[i]], cluster[[j]]))
cluster[[j]] <- list();
}
}
}
}
result <- list();
for(i in 1:length(cluster)) {
if(length(cluster[[i]])>0) {
result[[length(result)+1]] <- cluster[[i]]
}
}
for(i in 1:length(result)) {
for(j in result[[i]]) {
data[j, 3] <- i
}
}
library(ggplot2)
p <- ggplot(data, aes(x,y))
p + geom_point(size=2.5, aes(colour=factor(data[, 3]))) + theme(legend.position='top')
write.csv(data[, 1:2], file = "data.csv", row.names = FALSE, quote = FALSE)
data <- read.csv('data.csv')
data <- read.csv('data.csv')
View(data)
data <- read.csv('data.csv')
#将所有点标记为核心点、边界点或噪声点
#核心点（Core Points）：
#如果某个点的邻域内的点的个数超过某个阀值，则它是一个核心点，即表示它位于簇的内部。
#邻域的大小由半径参数eps决定，阀值由minPts参数决定。
eps <- 0.2;
MinPts <- 5;
d <- as.matrix(dist(data))
ps <- data.frame(index=c(NA), density=c(NA), type=c(NA))
for(i in 1:nrow(data)) {
#i <- 1;
index <- which(d[i, ]<eps)
#密度，记得除去它本身
density <- length(index) - 1;
if(density>MinPts) {
#核心点
ps[i, ] <- c(i, density, 1)
} else if(density>0) {
#边界点
ps[i, ] <- c(i, density, 2)
} else {
#噪声点
ps[i, ] <- c(i, density, 0)
}
}
corePoints <- data[which(ps$type!=0), ]
coreDists <- as.matrix(dist(corePoints))
cluster <- list();
for(i in 1:nrow(coreDists)) {
cluster[[i]] <- names(which(coreDists[i, ]<eps));
}
for(i in 1:length(cluster)) {
for(j in 1:length(cluster)) {
if(any(cluster[[j]] %in% cluster[[i]]) && i!=j) {
if(ps[cluster[[i]][1], ]$type==1 && ps[cluster[[i]][2], ]$type==1) {
cluster[[i]] <- unique(append(cluster[[i]], cluster[[j]]))
cluster[[j]] <- list();
}
}
}
}
result <- list();
for(i in 1:length(cluster)) {
if(length(cluster[[i]])>0) {
result[[length(result)+1]] <- cluster[[i]]
}
}
for(i in 1:length(result)) {
for(j in result[[i]]) {
data[j, 3] <- i
}
}
library(ggplot2)
p <- ggplot(data, aes(x,y))
p + geom_point(size=2.5, aes(colour=factor(data[, 3]))) + theme(legend.position='top')
data <- read.csv('data.csv')
View(data)
plot(data)
eps <- 0.2;
MinPts <- 5;
d <- as.matrix(dist(data))
#将所有点标记为核心点、边界点或噪声点
ps <- data.frame(index=c(NA), density=c(NA), type=c(NA))
for(i in 1:nrow(data)) {
#i <- 1;
index <- which(d[i, ]<eps)
#密度,空间中任意一点的密度是以该点为圆心、以 Eps 为半径的圆区域内包含的点数
density <- length(index);
if(density>MinPts) {
#核心点（Core Points）
#空间中某一点的密度，如果大于某一给定阈值MinPts，则称该为核心点
ps[i, ] <- c(i, density, 1)
} else if(density>1) {
#边界点（Border Points）
#空间中某一点的密度，如果小于某一给定阈值MinPts，则称该为边界点
ps[i, ] <- c(i, density, 2)
} else {
#噪声点（Noise Points）
#数据集中不属于核心点，也不属于边界点的点，也就是密度值为1的点
ps[i, ] <- c(i, density, 0)
}
}
#把噪声点过滤掉，因为噪声点无法聚类，它们独自一类
corePoints <- data[which(ps$type!=0), ]
coreDists <- as.matrix(dist(corePoints))
#首先，把每个点的领域都作为一类
#邻域（Neighborhood）
#空间中任意一点的邻域是以该点为圆心、以 Eps 为半径的圆区域内包含的点集合
cluster <- list();
for(i in 1:nrow(coreDists)) {
cluster[[i]] <- names(which(coreDists[i, ]<eps));
}
#然后，将有交集的领域，都合并为新的领域
for(i in 1:length(cluster)) {
for(j in 1:length(cluster)) {
if(any(cluster[[j]] %in% cluster[[i]]) && i!=j) {
if(ps[cluster[[i]][1], ]$type==1 && ps[cluster[[i]][2], ]$type==1) {
cluster[[i]] <- unique(append(cluster[[i]], cluster[[j]]))
cluster[[j]] <- list();
}
}
}
}
#最后，找出独立（也就是没有交集）的领域，就是我们最后的聚类的结果了
result <- list();
for(i in 1:length(cluster)) {
if(length(cluster[[i]])>0) {
result[[length(result)+1]] <- cluster[[i]]
}
}
#找出每个点所在领域的序号，作为他们最后聚类的结果标记
for(i in 1:length(result)) {
for(j in result[[i]]) {
data[j, 3] <- i
}
}
plot(data, cols=data[,3])
plot(data[, 1], data[, 2], cols=data[,3])
plot(data[, 1], data[, 2], type=data[,3])
plot(data[, 1], data[, 2], col=data[,3])
plot(data[, 1], data[, 2], col=data[,3])
plot(data[, 1], data[, 2])
data <- read.csv('data.csv')
plot(data[, 1], data[, 2])
View(data)
eps <- 0.2;
MinPts <- 5;
d <- as.matrix(dist(data))
View(d)
#将所有点标记为核心点、边界点或噪声点
ps <- data.frame(index=c(NA), density=c(NA), type=c(NA))
for(i in 1:nrow(data)) {
#i <- 1;
index <- which(d[i, ]<eps)
#密度,空间中任意一点的密度是以该点为圆心、以 Eps 为半径的圆区域内包含的点数
density <- length(index);
if(density>MinPts) {
#核心点（Core Points）
#空间中某一点的密度，如果大于某一给定阈值MinPts，则称该为核心点
ps[i, ] <- c(i, density, 1)
} else if(density>1) {
#边界点（Border Points）
#空间中某一点的密度，如果小于某一给定阈值MinPts，则称该为边界点
ps[i, ] <- c(i, density, 2)
} else {
#噪声点（Noise Points）
#数据集中不属于核心点，也不属于边界点的点，也就是密度值为1的点
ps[i, ] <- c(i, density, 0)
}
}
View(ps)
corePoints <- data[which(ps$type!=0), ]
coreDists <- as.matrix(dist(corePoints))
cluster <- list();
for(i in 1:nrow(coreDists)) {
cluster[[i]] <- names(which(coreDists[i, ]<eps));
}
for(i in 1:length(cluster)) {
for(j in 1:length(cluster)) {
if(any(cluster[[j]] %in% cluster[[i]]) && i!=j) {
if(ps[cluster[[i]][1], ]$type==1 && ps[cluster[[i]][2], ]$type==1) {
cluster[[i]] <- unique(append(cluster[[i]], cluster[[j]]))
cluster[[j]] <- list();
}
}
}
}
cluster
result <- list();
for(i in 1:length(cluster)) {
if(length(cluster[[i]])>0) {
result[[length(result)+1]] <- cluster[[i]]
}
}
for(i in 1:length(result)) {
for(j in result[[i]]) {
data[j, 3] <- i
}
}
View(data)
plot(data[, 1], data[, 2], col=data[,3])
data <- read.csv('data.csv')
plot(data[, 1], data[, 2])
# 用K均值聚类
model1 <- kmeans(data, centers=2)
plot(data[, 1], data[, 2], col=model1$cluster)
model2 <- dbscan(data, eps=0.2, MinPts=5)
library('fpc')
install.packages('fpc')
library('fpc')
data <- read.csv('data.csv')
plot(data[, 1], data[, 2])
model1 <- kmeans(data, centers=2)
plot(data[, 1], data[, 2], col=model1$cluster)
model2 <- dbscan(data, eps=0.2, MinPts=5)
plot(data[, 1], data[, 2], col=model2$cluster)
